<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GEOS</title>
    <link>http://libgeos.org/</link>
    <description>Recent content on GEOS</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Oct 2021 14:13:20 -0700</lastBuildDate><atom:link href="http://libgeos.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reference Docs</title>
      <link>http://libgeos.org/usage/doxygen/</link>
      <pubDate>Mon, 04 Oct 2021 13:44:59 -0700</pubDate>
      
      <guid>http://libgeos.org/usage/doxygen/</guid>
      <description>The Doxygen documentation is the most up-to-date reference for the C and C++ API of GEOS.
 C API C++ API  </description>
    </item>
    
    <item>
      <title>C API Programming</title>
      <link>http://libgeos.org/usage/c_api/</link>
      <pubDate>Mon, 04 Oct 2021 14:21:00 -0700</pubDate>
      
      <guid>http://libgeos.org/usage/c_api/</guid>
      <description>Most programs using GEOS use the C API, rather than building against the C++ headers. The C API offers the a number of benefits:
 Stable API, that preserves behaviour and function naming over multiple releases. Stable ABI, allowing new binaries to be dropped into place without requiring a rebuild of dependent applications. Simple access pattern, using the simple features model as the basis for most operations.  In exchange for this simplicity and stability, the C API has a few requirements from application authors:</description>
    </item>
    
    <item>
      <title>C&#43;&#43; API Programming</title>
      <link>http://libgeos.org/usage/cpp_api/</link>
      <pubDate>Mon, 04 Oct 2021 14:21:00 -0700</pubDate>
      
      <guid>http://libgeos.org/usage/cpp_api/</guid>
      <description>The GEOS C++ API is included in the collection of header files installed in include/geos which is a very large collection. Effectively it includes both &amp;ldquo;public&amp;rdquo; headers that a user might be expected to make use of and &amp;ldquo;private&amp;rdquo; headers that are mostly only used by internal algorithms. Currently, the two kinds of headers are not marked in any way, nor is there an easy way to disentagle them.
Using the C++ API means giving up:</description>
    </item>
    
    <item>
      <title>Version 3.10.0</title>
      <link>http://libgeos.org/posts/2021-10-01-geos-3-10-released/</link>
      <pubDate>Thu, 21 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>http://libgeos.org/posts/2021-10-01-geos-3-10-released/</guid>
      <description>The 3.10 release of GEOS is now available to download.
  This release includes the following new features in the C API (and of course underlying changes to the C++ code to support these features):
 CAPI additions for testing whether geometries are within a distance of each other, GEOSDistanceWithin and GEOSPreparedDistanceWithin CAPI addition for adding extra vertices to a geometry, GEOSDensify CAPI additions for high-performance construction/reading of coordinate sequences from/to memory buffers, GEOSCoordSeq_copyFromArrays, GEOSCoordSeq_copyFromBuffer, GEOSCoordSeq_copyToArrays, and GEOSCoordSeq_copyToBuffer CAPI addition for new validity enforement algorithm, GEOSMakeValidWithParams CAPI addition for ISO WKB output, GEOSWKBWriter_getFlavor and GEOSWKBWriter_setFlavor CAPI addition to create a constrained delaunay of polygonal input, GEOSConstrainedDelaunayTriangulation    There is a new utility for running arbitrary GEOS commands against input files, geosop.</description>
    </item>
    
    <item>
      <title>CI Status</title>
      <link>http://libgeos.org/development/ci_status/</link>
      <pubDate>Mon, 04 Oct 2021 14:21:00 -0700</pubDate>
      
      <guid>http://libgeos.org/development/ci_status/</guid>
      <description>Branch Debbie Winnie Dronie GitLab Bessie Bessie32 GitHub     main          3.10          3.9          3.8          3.7           Runners  Debbie - Debian 8.</description>
    </item>
    
    <item>
      <title>GEOS RFC 1 - Project Steering Committee</title>
      <link>http://libgeos.org/development/rfcs/rfc01/</link>
      <pubDate>Mon, 04 Oct 2021 14:21:00 -0700</pubDate>
      
      <guid>http://libgeos.org/development/rfcs/rfc01/</guid>
      <description>This document describes how the PSC GEOS Project Steering Committee determines membership, and makes decisions on all aspects of the GEOS project - both technical and non-technical.
         RFC 1 Project Steering Committee   Author Paul Ramsey   Contact pramsey@cleverelephant.ca   Status Approved, April 10, 2008    Summary This document describes how the GEOS Project Steering Committee (PSC) determines membership, and makes decisions on all aspects of the GEOS project - both technical and non-technical.</description>
    </item>
    
    <item>
      <title>GEOS RFC 2 - Committer Guidelines </title>
      <link>http://libgeos.org/development/rfcs/rfc02/</link>
      <pubDate>Mon, 04 Oct 2021 14:21:00 -0700</pubDate>
      
      <guid>http://libgeos.org/development/rfcs/rfc02/</guid>
      <description>This document describes the technical and legal responsibilities of [wiki:PSC GEOS committers].
         RFC 2 Committer Guidelines   Author Paul Ramsey, Regina Obe   Contact pramsey@cleverelephant.ca, lr@pcorp.us   Status Draft    Summary This document describes the technical and legal responsibilities of [wiki:PSC GEOS committers].
Election to GIT Commit Access Permission for GIT commit access shall be provided to new developers only if accepted by the [wiki:PSC GEOS Project Steering Committee].</description>
    </item>
    
    <item>
      <title>GEOS RFC 3 - Thread Safe CAPI </title>
      <link>http://libgeos.org/development/rfcs/rfc03/</link>
      <pubDate>Mon, 04 Oct 2021 14:21:00 -0700</pubDate>
      
      <guid>http://libgeos.org/development/rfcs/rfc03/</guid>
      <description>Summary The current CAPI in GEOS is not thread safe. The error handling and initialization/finalization process specifically can cause problems.
Definitions (As defined by Frank Warmerdam in http://trac.osgeo.org/gdal/wiki/rfc16_ogr_reentrancy)
Reentrant: A reentrant function can be called simultaneously by multiple threads provided that each invocation of the function references unique data.
Thread-safe: A thread-safe function can be called simultaneously by multiple threads when each invocation references shared data. All access to the shared data is serialized.</description>
    </item>
    
    <item>
      <title>GEOS RFC 4 - Code Formatting Style</title>
      <link>http://libgeos.org/development/rfcs/rfc04/</link>
      <pubDate>Mon, 04 Oct 2021 14:21:00 -0700</pubDate>
      
      <guid>http://libgeos.org/development/rfcs/rfc04/</guid>
      <description>This document proposes and describes desired code formatting style used across C/C++ source code in GEOS.
         RFC 4 Code Formatting Style   Author Mateusz Łoskot   Contact mateusz@loskot.net   Status Dropped (no agreement)    Summary The document proposes and describes desired default code formatting style guidelines for GEOS programming in C and C++ languages.
The goal of this document is to initiate process to reach an agreement for the default code formatting style.</description>
    </item>
    
    <item>
      <title>GEOS RFC 5 - C&#43;&#43;11 Compilation Mode</title>
      <link>http://libgeos.org/development/rfcs/rfc05/</link>
      <pubDate>Mon, 04 Oct 2021 14:21:00 -0700</pubDate>
      
      <guid>http://libgeos.org/development/rfcs/rfc05/</guid>
      <description>This document proposes and describes desired code formatting style used across C/C++ source code in GEOS.
         RFC 5 C++11 Compilation Mode   Author Mateusz Łoskot   Contact mateusz@loskot.net   Status Accepted (no agreement)    Summary The document proposes to switch to C++11 compilation mode as default throughout the whole C++ source code of GEOS.
The goal of the document is to request and achieve agreement on using C++11 as the minimum required version of the C++ programming language standard.</description>
    </item>
    
    <item>
      <title>GEOS RFC 6 - Require explicit configure to use the C&#43;&#43; API</title>
      <link>http://libgeos.org/development/rfcs/rfc06/</link>
      <pubDate>Mon, 04 Oct 2021 14:21:00 -0700</pubDate>
      
      <guid>http://libgeos.org/development/rfcs/rfc06/</guid>
      <description>RFC 9 Require explicit configure to use the C++ API   Author Regina Obe   Contact lr@pcorp.us   Status Not Passed    Past discussions Trac ticket to deprecate another request to deprecate and osm2pgsql mess more examples about how apps linking directly to GEOS C++ causing problems for other applications Pointing out removing ability to use GEOS C++ reduces users freedoms</description>
    </item>
    
    <item>
      <title>GEOS RFC 7 - Use CMake for Build System</title>
      <link>http://libgeos.org/development/rfcs/rfc07/</link>
      <pubDate>Mon, 04 Oct 2021 14:21:00 -0700</pubDate>
      
      <guid>http://libgeos.org/development/rfcs/rfc07/</guid>
      <description>RFC 7 Use CMake for build system   Author Daniel Baston   Contact dbaston@gmail.com   Status Accepted, January 15, 2021    This document proposes to use CMake as the build system for GEOS and discontinue use of autotools and NMake.
Since version 3.5, we have officially supported building GEOS with CMake: https://trac.osgeo.org/geos/wiki/BuildingOnUnixWithCMake
GEOS is also required to build with autotools and NMake.</description>
    </item>
    
    <item>
      <title>GEOS RFC 8 - Improve Coordinate Sequence API (WIP)</title>
      <link>http://libgeos.org/development/rfcs/rfc08/</link>
      <pubDate>Mon, 04 Oct 2021 14:21:00 -0700</pubDate>
      
      <guid>http://libgeos.org/development/rfcs/rfc08/</guid>
      <description>RFC 8 Improve Coordinate Sequence API   Author Martin Davis   Contact martin.davis@crunchydata.com   Status In Discussion    This document proposes to modify the Coordinate Sequence API to improve performance and adaptiveness.
These improvements are (likely to be) breaking changes to the C++ API.
These may require extensions to the C API to be externally available, but should not result in breaking the current C API.</description>
    </item>
    
    <item>
      <title>GEOS RFC 9 - Restore the C&#43;&#43; API (WIP)</title>
      <link>http://libgeos.org/development/rfcs/rfc09/</link>
      <pubDate>Mon, 04 Oct 2021 14:21:00 -0700</pubDate>
      
      <guid>http://libgeos.org/development/rfcs/rfc09/</guid>
      <description>RFC 9 Restore the C++ API   Author Mateusz Łoskot   Contact mateusz@loskot.net   Status [https://lists.osgeo.org/pipermail/geos-devel/2019-May/008972.html Proposed]    The GEOS library is a C++ library offering two kinds of public API: C++ API and C API.
The GEOS library started as a C++ library. The C API was introduced in version 2.2.
The GEOS library has never promised any stability of the C++ API and this fact has always been documented and clearly stated:</description>
    </item>
    
    <item>
      <title>GeoJSON</title>
      <link>http://libgeos.org/specifications/geojson/</link>
      <pubDate>Mon, 04 Oct 2021 14:18:42 -0700</pubDate>
      
      <guid>http://libgeos.org/specifications/geojson/</guid>
      <description>content</description>
    </item>
    
    <item>
      <title>Well-Known Binary (WKB)</title>
      <link>http://libgeos.org/specifications/wkb/</link>
      <pubDate>Mon, 04 Oct 2021 14:18:42 -0700</pubDate>
      
      <guid>http://libgeos.org/specifications/wkb/</guid>
      <description>content</description>
    </item>
    
    <item>
      <title>Well-Known Text (WKT)</title>
      <link>http://libgeos.org/specifications/wkt/</link>
      <pubDate>Mon, 04 Oct 2021 14:18:42 -0700</pubDate>
      
      <guid>http://libgeos.org/specifications/wkt/</guid>
      <description>content</description>
    </item>
    
    <item>
      <title>Download Source</title>
      <link>http://libgeos.org/usage/download/</link>
      <pubDate>Mon, 04 Oct 2021 13:44:59 -0700</pubDate>
      
      <guid>http://libgeos.org/usage/download/</guid>
      <description>Release Date Release Download Link     2021/10/21 3.10.0 geos-3.10.0.tar.bz2   2020/12/10 3.9.1 geos-3.9.1.tar.bz2   2020/03/10 3.8.1 geos-3.8.1.tar.bz2   2019/10/04 3.7.3 geos-3.7.3.tar.bz2   2020/12/11 3.6.5 geos-3.6.5.tar.bz2   2019/10/04 3.5.2 geos-3.5.2.tar.bz2    Build From Source Build Requirements  CMake 3.13 or later. C++11 compiler. We regularly test GCC, Clang and Microsoft Visual C++. Doxygen to build the API documentation.  Build Builds with CMake are done &amp;ldquo;outside the tree&amp;rdquo; either in a build directory in the source tree or next to the tree.</description>
    </item>
    
    <item>
      <title>Install Packages</title>
      <link>http://libgeos.org/usage/install/</link>
      <pubDate>Mon, 04 Oct 2021 13:44:59 -0700</pubDate>
      
      <guid>http://libgeos.org/usage/install/</guid>
      <description>Red Hat There is a GEOS package in the EPEL (Extra Packages for Enterprise Linux) repository.
# Add the EPEL repository yum -y install epel-release # Install the GEOS runtime and development packages rpm -Uvh geos geos-devel Ubuntu The Ubuntu GIS project maintains a collection of repositories with builds of common open source geospatial projects, including GEOS.
# Add the Ubuntu GIS PPA sudo apt-get install python-software-properties sudo add-apt-repository ppa:ubuntugis/ppa # Install the packages sudo apt-get install geos Debian The Debian GIS project maintains GEOS packages and pushes them into the appropriate Debian respositories.</description>
    </item>
    
  </channel>
</rss>
